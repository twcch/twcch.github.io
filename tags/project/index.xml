<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project on 志謙&#39;s Blog</title>
    <link>http://twcch.io/tags/project/</link>
    <description>Recent content in Project on 志謙&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Apr 2025 00:00:00 +0800</lastBuildDate>
    <atom:link href="http://twcch.io/tags/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>視覺化專案 - 200 個國家 200 百年 4 分鐘</title>
      <link>http://twcch.io/posts/projects/articles_25040702/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0800</pubDate>
      <guid>http://twcch.io/posts/projects/articles_25040702/</guid>
      <description>&lt;p&gt;這是一個資料視覺化專案——「Dynamic Visualization: 200 Countries, 200 Years, 4 Minutes」。它將涵蓋 1816 至 2016 年，200 個國家的歷史變遷以互動動畫呈現，整體動畫長度約四分鐘，旨在結合「時間」與「地理」維度，提供用戶沉浸式的歷史視覺體驗。&lt;/p&gt;&#xA;&lt;p&gt;成品呈現頁面: &lt;a href=&#34;https://twcch.io/TwoHundredYearsTwoHundredCountries/views.html&#34;&gt;https://twcch.io/TwoHundredYearsTwoHundredCountries/views.html&lt;/a&gt;&lt;br&gt;&#xA;GitHub 原始碼: &lt;a href=&#34;https://github.com/twcch/TwoHundredYearsTwoHundredCountries&#34;&gt;https://github.com/twcch/TwoHundredYearsTwoHundredCountries&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;專案目標-動態傳遞跨時代趨勢&#34;&gt;專案目標: 動態傳遞跨時代趨勢&lt;/h2&gt;&#xA;&lt;p&gt;我這次的核心目的，是打造一段「高品質又美觀」的互動式動畫。相比靜態圖表，此動畫能讓使用者更直覺地感受到全球歷史變化的脈絡與節奏。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;跨國維度: 一次呈現 200 國家在相同指標上的變化&lt;/li&gt;&#xA;&lt;li&gt;跨年代視角: 覆蓋整整兩個世紀&lt;/li&gt;&#xA;&lt;li&gt;互動與美感: 最終以 Plotly Express 強化動畫的動態感與互動性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;這是一個典型的「Proof of Concept」，驗證我能用純 Python 開源工具在本地完成動態資料視覺化，而不是依賴商業軟體。&lt;/p&gt;&#xA;&lt;h2 id=&#34;處理流程解析&#34;&gt;處理流程解析&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;資料擷取與清理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 pandas 從 Gapminder 或其他開源來源讀入年份、國家與指標。&lt;/li&gt;&#xA;&lt;li&gt;透過 core/data.py 標準化欄位名稱、處理缺值、並轉換為長型結構，以利後續分析。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;寫入 SQLite&#xA;&lt;ul&gt;&#xA;&lt;li&gt;為了方便查詢與存取，我用 core/sqlite_db.py 將清理後的資料匯入 SQLite 資料庫，一併記錄 metadata。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;產生視覺化資料表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;scripts/build_view_table.py 將資料按年與國家展開，組合成完整用於視覺化的 DataFrame。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;動態驗證：matplotlib 原型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在 proof_of_concept.py 中，以 matplotlib 建立由靜態圖逐幀拼湊的基本動畫，確認播放邏輯與視覺節奏。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;互動動畫：Plotly Express&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最終在 plot_with_px.py 中改以 Plotly Express，產出包含滑動條、國家標籤、時間軸與音效的四分鐘互動畫面，並輸出至 docs/views.html。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;技術選擇與實務考量&#34;&gt;技術選擇與實務考量&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;資料處理: pandas 濾除缺值、重塑表格、處理 metadata，全套操作都在 pandas 中完成。&lt;/li&gt;&#xA;&lt;li&gt;儲存管理: 使用 SQLite 儲存資料，方便查詢與重複執行，而不用每次都從頭開 CSV。&lt;/li&gt;&#xA;&lt;li&gt;動畫原型: matplotlib 可迅速驗證概念、調整幀率與時間間隔。&lt;/li&gt;&#xA;&lt;li&gt;互動視覺化: Plotly Express 能更快速加入滑桿、hover 標籤，動畫更加流暢美觀，也更適合網頁展示。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;展示成果&#34;&gt;展示成果&lt;/h2&gt;&#xA;&lt;p&gt;最終輸出是一個 HTML 檔，內嵌動態 html5 視覺化:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
